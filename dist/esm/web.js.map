{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC1C,KAAK,CAAC,WAAW,CAAC,OAAwB;QACtC,IAAI,cAAc,IAAI,SAAS,EAAE;YAC7B,SAAS,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;SAChE;aAAM;YACH,MAAM,IAAI,CAAC,WAAW,CAAC,kDAAkD,CAAC,CAAC;SAC9E;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,OAA6B;QAChD,IAAI,cAAc,IAAI,SAAS,EAAE;YAC7B,SAAS,CAAC,YAAY,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;SAChE;aAAM;YACH,MAAM,IAAI,CAAC,WAAW,CAAC,kDAAkD,CAAC,CAAC;SAC9E;IACL,CAAC;IAAA,CAAC;IAEF,KAAK,CAAC,gBAAgB,CAAC,OAA6B,EAAE,OAA6B;QAC/E,IAAI,cAAc,IAAI,SAAS,EAAE;YAC7B,SAAS,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACpE;aAAM;YACH,MAAM,IAAI,CAAC,WAAW,CAAC,kDAAkD,CAAC,CAAC;SAC9E;IACL,CAAC;IAAA,CAAC;IAEF,KAAK,CAAC,gBAAgB,CAAC,OAA6B;QAChD,IAAI,cAAc,IAAI,SAAS,EAAE;YAC7B,SAAS,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SACpD;aAAM;YACH,MAAM,IAAI,CAAC,WAAW,CAAC,kDAAkD,CAAC,CAAC;SAC9E;IACL,CAAC;IAAA,CAAC;CACL","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type { MetadataOptions, PlaybackStateOptions, ActionHandlerOptions, ActionHandler, PositionStateOptions, MediaSessionPlugin } from './definitions';\r\n\r\nexport class MediaSessionWeb extends WebPlugin implements MediaSessionPlugin {\r\n    async setMetadata(options: MetadataOptions): Promise<void> {\r\n        if ('mediaSession' in navigator) {\r\n            navigator.mediaSession.metadata = new MediaMetadata(options);\r\n        } else {\r\n            throw this.unavailable('Media Session API not available in this browser.');\r\n        }\r\n    }\r\n\r\n    async setPlaybackState(options: PlaybackStateOptions): Promise<void> {\r\n        if ('mediaSession' in navigator) {\r\n            navigator.mediaSession.playbackState = options.playbackState;\r\n        } else {\r\n            throw this.unavailable('Media Session API not available in this browser.');\r\n        }\r\n    };\r\n\r\n    async setActionHandler(options: ActionHandlerOptions, handler: ActionHandler | null): Promise<void> {\r\n        if ('mediaSession' in navigator) {\r\n            navigator.mediaSession.setActionHandler(options.action, handler);\r\n        } else {\r\n            throw this.unavailable('Media Session API not available in this browser.');\r\n        }\r\n    };\r\n\r\n    async setPositionState(options: PositionStateOptions): Promise<void> {\r\n        if ('mediaSession' in navigator) {\r\n            navigator.mediaSession.setPositionState(options);\r\n        } else {\r\n            throw this.unavailable('Media Session API not available in this browser.');\r\n        }\r\n    };\r\n}\r\n"]}